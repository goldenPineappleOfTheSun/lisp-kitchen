(define (object-to-string obj)
  (let ((port (open-output-string)))
    (display obj port)
    (get-output-string port)))

(define (foldl func initial lst)
  (if (null? lst)
      initial
      (foldl func (func initial (car lst)) (cdr lst))))

; утилита: чейнит вызовы вместе
(define (>> object . commands)
  (let ((wrapped (cons object "")))
		(let ((calculated 
			(foldl 
				(lambda (result cmd) 
				  (if (equal? (cdr result) "")
				  	
				  	; true
				  	(let ((temp (apply (car result) cmd))) 
				  		(if (procedure? temp)
					  		(cons temp "")
					  		(cons temp (string-append "The command " (object-to-string cmd) " stopped chaining propagation"))))
				  	
				  	; false
					  result))

				 wrapped
				 commands)))

				(if (equal? (cdr calculated) "")
					(car calculated)
					(cdr calculated))
		)))

(define (trim count lst)
  (reverse (car (foldl 
    (lambda (result item) 
      (cond
        ((eq? (cdr result) count) result)
        (else (cons (cons item (car result)) (+ (cdr result) 1)))))
    (cons '() 0)
    lst))))

; интерфейс продукта
(define (template-product name icon)
    (lambda (cmd . args)
        (cond 
          ((eq? cmd 'print) icon)
          ((eq? cmd 'name) name)
        )))

; курица
(define (make-chicken)
  (template-product "chicken" "🍗"))

; яблоко
(define (make-apple)
  (template-product "apple" "🍎"))

; интерфейс хранилища
(define (template-storage capacity . initial-items)
  (lambda (cmd . args)
    (cond 
      ((eq? cmd 'print) (map (lambda (item) (item 'print)) initial-items))
      ((eq? cmd 'put) (apply template-storage capacity (trim capacity (append initial-items args))))
      ((eq? cmd 'get) (find (lambda (item) (equal? (car args) (item 'name))) initial-items))
    )))

; морозильник
(define (make-freezer capacity . initial-items)
	(apply template-storage (cons capacity initial-items)))

; полки
(define (make-shelves capacity . initial-items)
	(apply template-storage (cons capacity initial-items)))

; холодильник
(define (make-fridge capacity freezer-capacity) ; фасад
    
	(define (make-fridge-inner capacity freezer-capacity initial-items initial-freezer-items)
	    
		(let ((fridge (apply make-freezer (cons capacity initial-items)))
			  (freezer (apply template-storage (cons freezer-capacity initial-freezer-items))))
	
		  (lambda (cmd . args)
		    (cond 
		          
		      ; common
		      ((eq? cmd 'print) 
		      	(string-append 
		      		"storage: [" (apply string-append (apply fridge (cons 'print args))) "] "
			      	"freezer: [" (apply string-append (apply freezer (cons 'print args))) "]"))
		      
		      ; fridge
		      ((eq? cmd 'print) (apply fridge (cons cmd args)))
		      ((eq? cmd 'put) (make-fridge-inner 
		      					capacity freezer-capacity 
		      					(trim capacity (append initial-items args)) 
		      					initial-freezer-items))
		      ((eq? cmd 'get) (apply fridge (cons 'get args)))
		      
		      ; freezer
		      ((eq? cmd 'put-freezer) (make-fridge-inner 
		      					capacity freezer-capacity 
		      					initial-items
		      					(trim freezer-capacity (append initial-freezer-items args))))
		      ((eq? cmd 'get-freezer) (apply freezer (cons 'get args)))
		      
		     ))))
		 
	(make-fridge-inner capacity freezer-capacity '() '()))
 
(define chicken1 (make-chicken))
(define apple1 (make-apple))
(define apple2 (make-apple))
(define empty-fridge (make-fridge 5 2))
(define full-fridge (>> empty-fridge
    (list 'put apple1 apple2 apple1)
    (list 'put-freezer chicken1 chicken1 chicken1)))

(display (full-fridge 'print))
(newline)
(display (>> full-fridge (list 'get "apple") (list 'print)))
(newline)
(display (>> full-fridge (list 'get-freezer "chicken") (list 'print)))