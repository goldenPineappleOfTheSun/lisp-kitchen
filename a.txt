(define (foldl func initial lst)
  (if (null? lst)
      initial
      (foldl func (func initial (car lst)) (cdr lst))))

; утилита: чейнит вызовы вместе
(define (>> object . commands)
  (foldl 
    (lambda (result cmd) (apply result cmd))
    object
    commands))

(define (trim count lst)
  (reverse (car (foldl 
    (lambda (result item) 
      (cond
        ((eq? (cdr result) count) result)
        (else (cons (cons item (car result)) (+ (cdr result) 1)))))
    (cons '() 0)
    lst))))

; интерфейс продукта
(define (template-product name icon)
    (lambda (cmd . args)
        (cond 
          ((eq? cmd 'print) icon)
          ((eq? cmd 'name) name)
         )))

; курица
(define (make-chicken)
  (template-product "chicken" "🍗"))

; яблоко
(define (make-apple)
  (template-product "apple" "🍎"))

; интерфейс холодильника
(define (make-fridge capacity . initial-items)
  (lambda (cmd . args)
    (cond 
      ((eq? cmd 'print) (map (lambda (item) (item 'print)) initial-items))
      ((eq? cmd 'put) (apply make-fridge capacity (trim capacity (append initial-items args))))
      ((eq? cmd 'get) (find (lambda (item) (equal? (car args) (item 'name))) initial-items))
     )))
 
(define chicken1 (make-chicken))
(define apple1 (make-apple))
(define apple2 (make-apple))
(define empty-fridge (make-fridge 5))
(display (>> empty-fridge (list 'put apple1 apple2 chicken1 apple1 apple2 chicken1 apple1 apple2 chicken1) (list 'print)))